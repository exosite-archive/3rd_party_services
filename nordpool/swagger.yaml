swagger:  "2.0"

################################################################################
#                              API Information                                 #
################################################################################
info:
  version:      "0.2"
  title:        Nordpoolspot market price api
  description:  |
                ## Get weather forecasts and historical weather data.

                This is a Murano Service integration with
                [Dark Sky](https://darksky.net) to allow your Murano solution
                to get weather forecasts and historical weather data.
                [Signup at their site](https://darksky.net/dev/register) and
                enter the provided Dark Sky secret key below.
  contact:
    name:       Exosite Support
    email:      support@exosite.com
# documentation
externalDocs:
  description:  Dark Sky documentation
  url:          https://darksky.net/dev/docs
host: hf00j9q9vk.execute-api.ap-southeast-1.amazonaws.com
# basePath prefixes all resource paths
basePath: /dev/api/marketdata/page 
# tags: Categories to be referenced in documentation & marketplace
tags:
  - name:         Integration
    description:  Interface to communicate to the Dark Sky weather service
schemes:
  # the Dark Sky REST API is served over HTTPS.
  - https
# format of the responses to the client (Accepts)
produces:
  - application/json

################################################################################
#                                           Paths                              #
################################################################################
paths:
  /10:
    get:
      tags:
        - calls
      operationId:  forecast
      summary:      Make a request to Dark Sky
      description:  Fetch a weather forecast or get historical weather data based of input latitude and longitude
      x-exosite-example:    |
                    --#ENDPOINT GET /darksky/weather

                    weather_data = Darksky.forecast({lat_and_long_or_time = '44.977753,93.265011'})

                    --lat and long and time string with ISO 8601 data string
                    -- weather_data = Darksky.forecast({lat_and_long_or_time = '44.977753,93.265011,2017-10-26T18:53:08+00:00'})
                    --lat and long and time string with UNIX timestamp
                    -- weather_data = Darksky.forecast({lat_and_long_or_time = '44.977753,93.265011,1509047567'})

                    -- Service call with some optional request parameters
                    --[[ weather_data = Darksky.forecast({lat_and_long_or_time = '44.977753,93.265011,1509047567',
                                                        exclude = 'flags',
                                                        lang = 'de'
                    })]]

                    print(to_json(weather_data))

                    response.message = weather_data
      parameters:
        - name:         currency
          in:           query
          description:  Currency to use for returning market price
          type:         string
          default:      EUR
        - name:         endDate
          in:           query
          description:  "EndDate for query, usually current date"
          type:         string
      responses:
        "200":
          description:  success
          schema:
            type:         object
            description:  forecast call results
            properties:
                latitude:
                  description: The forecast call's full results
                  type:     string
        default:
          description: error
          schema:
            $ref:       "#/definitions/ErrorResponse"
################################################################################
#                                 Definitions                                  #
################################################################################

definitions:
  ErrorResponse:
    description: Request error
    type: object
    properties:
      error:
        type: string
        description: Error message
      status:
        type: integer
        description: Response code
      type:
        type: string
        description: Error type
